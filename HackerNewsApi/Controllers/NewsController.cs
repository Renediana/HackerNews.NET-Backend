using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace HackerNewsApi.Controllers
{
    [Route("/")]
    [ApiController]
    public class NewsController : ControllerBase
    {
        private readonly INewsService newsService;
        private readonly IVotesService votesService;

        public NewsController(INewsService newsService, IVotesService votesService)
        {
            this.newsService = newsService;
            this.votesService = votesService;
        }

        // GET api/values
        [HttpGet("item/{id}.json")]
        public Task<Story> GetStory(int id)
        {
            return newsService.GetStory(id);
        }

        [HttpGet("topstories.json")]
        public Task<IEnumerable<int>> GetTopStories()
        {
            return newsService.GetTopStories();
        }

        private static List<int> ids = JsonSerializer.Deserialize<List<int>>("[25067701,25069452,25065026,25069350,25070304,25070810,25068782,25054177,25066838,25068350,25063683,25070224,25068727,25068678,25068578,25067407,25064855,25067236,25066587,25063726,25058543,25067230,25070539,25068820,25065735,25060166,25063682,25043544,25063695,25058167,25063184,25064593,25059554,25063122,25066855,25049079,25044254,25058045,25058619,25069644,25053238,25055501,25059133,25061781,25046691,25067396,25058113,25059946,25060762,25060568,25060321,25059605,25057985,25060152,25057824,25061901,25059392,25069120,25043541,25044909,25064674,25045571,25058363,25062850,25060973,25044876,25047409,25057889,25047141,25057062,25049528,25061438,25045325,25059296,25047818,25060613,25048415,25055125,25063669,25042002,25059755,25058783,25055730,25060942,25057794,25063677,25065325,25059440,25068562,25061097,25059205,25058821,25057153,25055991,25057864,25057372,25066024,25061292,25048028,25067453,25062285,25050893,25066079,25056061,25048455,25053553,25055908,25039370,25057162,25044016,25068130,25064608,25045655,25056353,25059984,25057860,25055590,25057123,25058271,25057789,25065144,25066263,25048271,25055659,25068603,25046714,25052341,25045573,25053184,25054741,25055267,25062325,25068383,25052001,25049718,25055674,25060260,25048097,25039470,25064773,25049426,25066918,25049253,25064841,25044131,25046738,25065580,25054979,25058910,25044192,25069207,25039632,25064876,25063254,25062997,25065623,25059942,25065080,25039675,25047838,25061823,25041716,25038980,25047732,25039013,25059292,25043280,25044597,25063603,25053644,25052029,25064811,25046389,25043989,25051292,25042327,25055989,25047228,25047169,25068668,25039393,25047992,25053812,25043760,25058574,25048725,25044759,25045422,25047544,25064278,25066137,25047021,25039448,25058977,25042384,25065043,25052691,25046157,25053881,25059587,25064348,25058236,25060609,25039713,25054841,25067070,25061998,25068311,25064102,25060458,25067005,25044604,25042827,25064353,25043741,25060418,25043859,25061928,25042551,25063569,25051115,25061671,25057078,25044185,25047752,25043808,25058467,25068594,25064804,25066436,25044147,25040237,25045028,25059586,25053429,25060407,25062512,25055056,25057899,25043731,25048070,25051217,25060282,25066135,25043924,25059792,25061585,25061840,25040494,25047887,25039045,25062932,25060735,25057453,25042595,25063994,25050240,25054231,25054192,25043165,25062253,25053892,25060516,25069713,25065367,25060371,25056068,25065149,25055866,25061634,25065055,25067702,25052446,25039846,25063012,25046588,25039204,25050788,25056078,25050050,25060192,25049493,25060070,25041961,25062140,25062023,25064112,25054444,25056090,25054820,25052818,25048608,25053982,25061364,25051550,25065495,25057771,25068998,25046762,25047688,25053251,25053120,25039480,25052999,25052699,25052605,25054746,25064745,25042664,25050928,25042408,25062717,25049946,25058834,25057528,25066441,25049394,25057681,25040845,25051932,25060515,25057609,25047513,25061340,25048031,25055824,25061259,25061226,25043912,25050120,25042288,25057746,25054591,25060164,25057931,25048325,25059818,25044695,25051710,25053974,25056164,25041361,25059706,25050472,25054843,25052944,25053611,25061909,25048565,25063289,25050479,25047215,25054933,25050456,25043888,25054595,25057680,25048085,25040301,25054254,25055742,25058632,25050687,25064096,25049114,25057061,25055250,25052168,25047272,25056356,25064691,25052141,25044247,25049364,25044900,25049230,25053580,25052998,25055681,25040369,25046863,25042085,25051521,25055368,25051466,25043030,25055344,25055232,25050826,25056128,25055070,25054964,25049153,25049083,25042631,25052969,25059933,25046837,25039377,25041835,25052773,25052630,25052440,25040013,25052195,25052174,25040346,25051382,25053134,25058539,25059574,25050691,25043059,25042311,25049411,25049398,25061639,25043431,25047772,25046981,25046328,25040994,25045971,25042399,25055094,25045315,25041875,25041252,25065689,25040518,25055780,25056142,25039485,25049284,25039238,25042833,25057823,25048874,25057327,25054486,25057060,25047334,25052890,25040491,25057723,25049268,25049132,25043765,25065860,25040398,25065657,25045946,25060882,25049535,25065200,25055465,25049536,25049520,25064672,25049261,25065270,25062803]");
        private static Random randomizer = new Random();



        [HttpGet("item/{id}/upvote")]
        public IActionResult UpVote(int id)
        {
            var voterID = Guid.NewGuid().ToString();//Request.Cookies["voterID"];
            var index = randomizer.Next(0, ids.Count - 1);
            id = ids[index];
            votesService.UpVote(voterID, id);
            return this.NoContent();
        }

        [HttpGet("item/{id}/downvote")]
        public IActionResult DownVote(int id)
        {
            var voterID = Request.Cookies["voterID"];
            votesService.DownVote(voterID, id);
            return this.NoContent();
        }

        [HttpGet("item/{id}/resetvote")]
        public IActionResult ResetVote(int id)
        {
            var voterID = Request.Cookies["voterID"];
            votesService.ResetVote(voterID, id);
            return this.NoContent();
        }

        [HttpPost("votes")]
        public Dictionary<string, Vote> Votes([FromBody] List<int> ids)
        {
            var voterID = Request.Cookies["voterID"];
            return votesService.GetVotes(ids, voterID).ToDictionary(pair => $"{pair.Key}", pair => pair.Value);
        }

    }
}